{"version":3,"sources":["redux/contacts/contactsAction.js","components/filter/FilterStyled.js","components/filter/Filter.js","components/contactsForm/ContactsFormStyled.js","components/contactsForm/ContactsForm.js","components/contactsList/ContactsListStyled.js","components/contactsList/ContactsList.js","components/SectionStyled.js","components/Section.js","components/App.js","redux/contacts/contactsReducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["addContact","createAction","deleteContact","setFilter","FilterStyled","styled","label","connect","state","filter","contacts","className","type","name","value","pattern","title","required","onChange","e","inputFilter","target","ContactsFormStyled","div","groupContacts","initialState","number","group","ContactsForm","onHandleChange","setState","onHandleSubmit","preventDefault","props","id","uuidv4","this","onSubmit","map","item","toUpperCase","Component","dispatch","contact","ContactsListStyled","items","toLowerCase","includes","onClick","SectionStyled","section","Section","children","App","itemsReducer","createReducer","action","some","payload","alert","filterReducer","_","contactsReducer","combineReducers","contactsPersistConfig","key","storage","whitelist","rootReducer","persistReducer","store","configureStore","reducer","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e892f2f7.chunk.js","sourcesContent":["// ==================== toolkit ==========================\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContact = createAction(\"contacts/addContact\");\r\nconst deleteContact = createAction(\"contacts/deleteContact\");\r\nconst setFilter = createAction(\"contacts/setFilter\");\r\n\r\nexport { addContact, deleteContact, setFilter };\r\n\r\n// ==================== redux ==========================\r\n// const ADD_CONTACT = \"contacts/addContact\";\r\n// const DELETE_CONTACT = \"contacts/deleteContact\";\r\n// const SET_FILTER = \"contacts/setFilter\";\r\n\r\n// const addContact = (newContact) => ({\r\n//   type: ADD_CONTACT,\r\n//   payload: newContact,\r\n// });\r\n\r\n// const deleteContact = (id) => ({\r\n//   type: DELETE_CONTACT,\r\n//   payload: id,\r\n// });\r\n\r\n// const setFilter = (filterValue) => ({\r\n//   type: SET_FILTER,\r\n//   payload: filterValue,\r\n// });\r\n\r\n// export { ADD_CONTACT, DELETE_CONTACT, SET_FILTER };\r\n// export { addContact, deleteContact, setFilter };\r\n","import styled from \"styled-components\";\r\n\r\nexport const FilterStyled = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-left: 20px;\r\n\r\n  .inputFilter {\r\n    width: 150px;\r\n    margin-top: 5px;\r\n\r\n    &:focus {\r\n      outline: none;\r\n      border: 2px solid lightblue;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setFilter } from \"../../redux/contacts/contactsAction\";\r\nimport { FilterStyled } from \"./FilterStyled\";\r\n\r\nconst Filter = ({ filter, setFilter }) => {\r\n  const onFilterChange = (e) => {\r\n    const inputFilter = e.target.value;\r\n    setFilter(inputFilter);\r\n  };\r\n  return (\r\n    <FilterStyled>\r\n      Find contacts by name:\r\n      <input\r\n        className=\"inputFilter\"\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Начните вводить имя контакта, который хотите найти\"\r\n        required\r\n        onChange={onFilterChange}\r\n      />\r\n    </FilterStyled>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    filter: state.contacts.filter,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { setFilter })(Filter);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactsFormStyled = styled.div`\r\n  border: 2px solid black;\r\n  width: 40%;\r\n  padding: 20px;\r\n  margin-left: 20px;\r\n\r\n  .phoneForm {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n  .labelForm {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 10px;\r\n  }\r\n  .inputForm {\r\n    width: 150px;\r\n    margin-top: 5px;\r\n  }\r\n  .buttonForm {\r\n    width: 40%;\r\n    background-color: white;\r\n    border-radius: 5px;\r\n    margin-top: 10px;\r\n  }\r\n`;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { addContact } from \"../../redux/contacts/contactsAction\";\r\nimport { ContactsFormStyled } from \"./ContactsFormStyled\";\r\n\r\nconst groupContacts = [\"all\", \"family\", \"friends\", \"work\"];\r\n\r\nconst initialState = {\r\n  name: \"\",\r\n  number: \"\",\r\n  group: groupContacts[0],\r\n};\r\n\r\nclass ContactsForm extends Component {\r\n  state = { ...initialState };\r\n\r\n  onHandleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  onHandleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addContact({ ...this.state, id: uuidv4() });\r\n    this.setState({ ...initialState });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <ContactsFormStyled>\r\n        <form className=\"phoneForm\" onSubmit={this.onHandleSubmit}>\r\n          <label className=\"labelForm\">\r\n            Name:\r\n            <input\r\n              className=\"inputForm\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              onChange={this.onHandleChange}\r\n            />\r\n          </label>\r\n          <label className=\"labelForm\">\r\n            Number:\r\n            <input\r\n              className=\"inputForm\"\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={number}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              onChange={this.onHandleChange}\r\n            />\r\n          </label>\r\n          <label className=\"labelForm\">\r\n            Group:\r\n            <select\r\n              name=\"group\"\r\n              className=\"inputForm\"\r\n              onChange={this.onHandleChange}\r\n            >\r\n              {groupContacts.map((item) => (\r\n                <option value={item} key={item}>\r\n                  {item.toUpperCase()}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </label>\r\n          <button type=\"submit\" className=\"buttonForm\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </ContactsFormStyled>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addContact: (contact) => {\r\n      dispatch(addContact(contact));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactsForm);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactsListStyled = styled.div`\r\n  .contactBtn {\r\n    background-color: white;\r\n    border-radius: 5px;\r\n    margin-left: 20px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { deleteContact } from \"../../redux/contacts/contactsAction\";\r\nimport { ContactsListStyled } from \"./ContactsListStyled\";\r\n\r\nconst ContactsList = ({ contacts, filter = \"\", deleteContact }) => {\r\n  return (\r\n    <ContactsListStyled>\r\n      <ul>\r\n        {contacts.map(\r\n          (contact) =>\r\n            contact.name.toLowerCase().includes(filter.toLowerCase()) && (\r\n              <li key={contact.id}>\r\n                {contact.name}: {contact.number}\r\n                <button\r\n                  className=\"contactBtn\"\r\n                  type=\"button\"\r\n                  onClick={() => deleteContact(contact.id)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            )\r\n        )}\r\n      </ul>\r\n    </ContactsListStyled>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    contacts: state.contacts.items,\r\n    filter: state.contacts.filter,\r\n  };\r\n};\r\n\r\n//Вариант как ниже описан используется в файле ContactsForm.js\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     deleteContact: (id) => {\r\n//       dispatch(deleteContact(id));\r\n//     },\r\n//   };\r\n// };\r\n\r\nexport default connect(mapStateToProps, { deleteContact })(ContactsList);\r\n","import styled from \"styled-components\";\r\n\r\nexport const SectionStyled = styled.section`\r\n  .sectionTitle {\r\n    margin-left: 20px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { SectionStyled } from \"./SectionStyled\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <SectionStyled>\r\n      <h2 className=\"sectionTitle\">{title}</h2>\r\n      {children}\r\n    </SectionStyled>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import React, { Component } from \"react\";\r\nimport Filter from \"./filter/Filter\";\r\nimport ContactsForm from \"./contactsForm/ContactsForm\";\r\nimport ContactsList from \"./contactsList/ContactsList\";\r\nimport Section from \"./Section\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Section title={\"Phonebook Redux and Toolkit version\"}>\r\n          <ContactsForm />\r\n        </Section>\r\n        <Section title={\"Contacts\"}>\r\n          <Filter />\r\n          <ContactsList />\r\n        </Section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// ==================== toolkit ==========================\r\n\r\nimport { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport { addContact, deleteContact, setFilter } from \"./contactsAction\";\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [addContact]: (state, action) => {\r\n    if (\r\n      state.some(\r\n        (item) => item.name.toLowerCase() === action.payload.name.toLowerCase()\r\n      )\r\n    ) {\r\n      alert(action.payload.name + \" is already in contact list\");\r\n      return state;\r\n    }\r\n    return [...state, action.payload];\r\n  },\r\n\r\n  [deleteContact]: (state, action) =>\r\n    state.filter((item) => item.id !== action.payload),\r\n});\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [setFilter]: (_, action) => action.payload,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nexport default contactsReducer;\r\n\r\n// ==================== redux ==========================\r\n\r\n// import { combineReducers } from \"redux\";\r\n// import { ADD_CONTACT, DELETE_CONTACT, SET_FILTER } from \"./contactsAction\";\r\n\r\n// const itemsReducer = (state = [], action) => {\r\n//   switch (action.type) {\r\n//     case ADD_CONTACT:\r\n//       if (\r\n//         state.some(\r\n//           (stateItem) =>\r\n//             stateItem.name.toLowerCase() === action.payload.name.toLowerCase()\r\n//         )\r\n//       ) {\r\n//         alert(action.payload.name + \" is already in contact list\");\r\n//         return state;\r\n//       }\r\n//       return [...state, action.payload];\r\n//     case DELETE_CONTACT:\r\n//       return state.filter((item) => item.id !== action.payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filterReducer = (state = \"\", action) => {\r\n//   switch (action.type) {\r\n//     case SET_FILTER:\r\n//       return action.payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const contactsReducer = combineReducers({\r\n//   items: itemsReducer,\r\n//   filter: filterReducer,\r\n// });\r\n\r\n// export default contactsReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport contactsReducer from \"./contacts/contactsReducer\";\r\nimport { persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst contactsPersistConfig = {\r\n  key: \"contacts\",\r\n  storage: storage,\r\n  whitelist: [\"items\"],\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n});\r\n\r\nexport default rootReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { persistStore } from \"redux-persist\";\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  // devTools: process.env.NODE_ENV !== \"development\",\r\n});\r\n\r\npersistStore(store);\r\n\r\nexport default store;\r\n\r\n// ==================== redux ==========================\r\n\r\n// import { createStore } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n// import rootReducer from \"./rootReducer\";\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// console.log(\"store.getState()\", store.getState());\n"],"sourceRoot":""}